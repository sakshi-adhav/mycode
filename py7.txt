#include <iostream>
#include <string>

using namespace std;

struct Node {
    string prn;
    string name;
    Node* next;
};

class PinnacleClub {
private:
    Node* head;

public:
    PinnacleClub() : head(nullptr) {}

    void addMember(string prn, string name) {
        head = new Node{prn, name, head};
        cout << "Member added successfully." << endl;
    }

    void deleteMember(string prn) {
        if (!head) {
            cout << "Club is empty. No members to delete." << endl;
            return;
        }

        Node* current = head;
        Node* previous = nullptr;

        while (current && current->prn != prn) {
            previous = current;
            current = current->next;
        }

        if (!current) {
            cout << "Member with PRN " << prn << " not found." << endl;
            return;
        }

        if (!previous) {
            head = current->next;
        } else {
            previous->next = current->next;
        }

        delete current;
        cout << "Member deleted successfully." << endl;
    }

    int totalMembers() {
        int count = 0;
        Node* current = head;
        while (current) {
            count++;
            current = current->next;
        }
        return count;
    }

    void displayMembers() {
        Node* current = head;
        while (current) {
            cout << "PRN: " << current->prn << ", Name: " << current->name << endl;
            current = current->next;
        }
    }
};

PinnacleClub concatenateLists(const PinnacleClub& list1, const PinnacleClub& list2) {
    PinnacleClub result;
    Node* current;

    current = list1.head;
    while (current) {
        result.addMember(current->prn, current->name);
        current = current->next;
    }

    current = list2.head;
    while (current) {
        result.addMember(current->prn, current->name);
        current = current->next;
    }

    return result;
}

int main() {
    PinnacleClub division1, division2;

    division1.addMember("2021001", "John Doe");
    division1.addMember("2021002", "Jane Smith");

    division2.addMember("2022001", "Bob Johnson");
    division2.addMember("2022002", "Alice Williams");

    cout << "Division 1 Members:" << endl;
    division1.displayMembers();

    cout << "\nDivision 2 Members:" << endl;
    division2.displayMembers();

    PinnacleClub concatenatedList = concatenateLists(division1, division2);

    cout << "\nConcatenated List:" << endl;
    concatenatedList.displayMembers();

    return 0;
}
